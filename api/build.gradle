plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

description = 'ProductDomain API Module - GraphQL API with Spring Boot'

dependencies {
    // Project dependencies
    implementation project(':database')
    
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    
    // GraphQL
    implementation 'com.graphql-java:graphql-java-extended-scalars:21.0'
    implementation 'com.graphql-java:graphql-java-extended-validation:21.0'
    
    // Security
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:15.0.0'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'io.rest-assured:rest-assured'
}

// Spring Boot configuration
springBoot {
    buildInfo()
}

bootJar {
    archiveBaseName = 'productdomain-api'
    archiveVersion = project.version
    
    manifest {
        attributes(
            'Implementation-Title': project.description,
            'Implementation-Version': project.version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss')
        )
    }
    
    layered {
        enabled = true
    }
}

// Test configuration
test {
    useJUnitPlatform()
    maxHeapSize = '2G'
    
    environment 'SPRING_PROFILES_ACTIVE', 'test'
    
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

// Integration test configuration
task integrationTest(type: Test) {
    description = 'Run integration tests'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'integration'
    }
    
    shouldRunAfter test
}

// GraphQL schema validation
task validateGraphQLSchema {
    description = 'Validate GraphQL schema files'
    group = 'verification'
    
    doLast {
        def schemaDir = file('src/main/resources/graphql')
        if (schemaDir.exists()) {
            println "Validating GraphQL schemas in: ${schemaDir}"
            // Add schema validation logic here
        } else {
            println "No GraphQL schema directory found"
        }
    }
}

check.dependsOn validateGraphQLSchema