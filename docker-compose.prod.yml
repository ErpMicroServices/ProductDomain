version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: productdomain-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-productdomain}
      POSTGRES_USER: ${POSTGRES_USER:-productuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/src/main/resources/db/migration:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-productuser} -d ${POSTGRES_DB:-productdomain}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: productdomain-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --protected-mode yes
      --bind 0.0.0.0
      --port 6379
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # API Service
  api:
    image: ${API_IMAGE:-productdomain/api:latest}
    container_name: productdomain-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-productdomain}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-productuser}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SPRING_REDIS_TIMEOUT: 2000
      SPRING_REDIS_LETTUCE_POOL_MAX_ACTIVE: 10
      SPRING_REDIS_LETTUCE_POOL_MAX_IDLE: 5
      SPRING_REDIS_LETTUCE_POOL_MIN_IDLE: 1
      SPRING_GRAPHQL_GRAPHIQL_ENABLED: "false"
      SPRING_GRAPHQL_WEBSOCKET_PATH: /graphql-ws
      SPRING_ACTUATOR_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      SPRING_DEVTOOLS_RESTART_ENABLED: "false"
      JAVA_OPTS: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75.0
        -XX:InitialRAMPercentage=50.0
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.jmx.enabled=false
        -Dspring.backgroundpreinitializer.ignore=true
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/temp
      - /app/logs

  # UI Service
  ui:
    image: ${UI_IMAGE:-productdomain/ui:latest}
    container_name: productdomain-ui
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: production
      API_BASE_URL: ${API_BASE_URL:-http://api:8080}
    ports:
      - "${UI_PORT:-80}:80"
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

networks:
  backend:
    driver: bridge
    name: productdomain-backend
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  frontend:
    driver: bridge
    name: productdomain-frontend
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24

volumes:
  postgres_data:
    name: productdomain-postgres-data
    driver: local
  redis_data:
    name: productdomain-redis-data
    driver: local