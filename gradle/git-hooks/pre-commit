#!/bin/bash
#
# Enhanced Pre-commit hook for ProductDomain project
# This hook runs quality checks and validates GitHub Actions workflows
#

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "Running pre-commit quality checks..."

# Store the current directory
PROJECT_ROOT=$(git rev-parse --show-toplevel)
cd "$PROJECT_ROOT"

# Function to check if files of a certain type have been staged
has_staged_files() {
    git diff --cached --name-only --diff-filter=ACM | grep -q "$1"
}

# Track overall status
FAILED=0

# NEW: Check GitHub Actions workflow files
if has_staged_files "\.github/workflows/.*\.ya\?ml$"; then
    echo "${YELLOW}Running GitHub Actions workflow validation...${NC}"
    
    # Get list of staged workflow files
    WORKFLOW_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.github/workflows/.*\.ya\?ml$")
    
    # Check if we have the Java validator available
    if [ -f "$PROJECT_ROOT/build/libs/productdomain-workflow-validator.jar" ]; then
        # Use the Java validator
        for WORKFLOW in $WORKFLOW_FILES; do
            echo "Validating $WORKFLOW..."
            java -cp "$PROJECT_ROOT/build/libs/productdomain-workflow-validator.jar" \
                com.erpmicroservices.productdomain.tools.WorkflowValidator "$WORKFLOW"
            if [ $? -ne 0 ]; then
                FAILED=1
            fi
        done
    else
        # Fallback to bash validation
        echo "${BLUE}Using bash validation (Java validator not built)${NC}"
        
        # Check for deprecated action versions
        check_deprecated_action() {
            local action="$1"
            local workflow="$2"
            local replacement=""
            
            case "$action" in
                "actions/checkout@v3") replacement="actions/checkout@v4";;
                "actions/setup-java@v3") replacement="actions/setup-java@v4";;
                "actions/setup-node@v3") replacement="actions/setup-node@v4";;
                "actions/setup-python@v4") replacement="actions/setup-python@v5";;
                "actions/upload-artifact@v3") replacement="actions/upload-artifact@v4";;
                "actions/download-artifact@v3") replacement="actions/download-artifact@v4";;
                "actions/cache@v3") replacement="actions/cache@v4";;
                "docker/setup-buildx-action@v2") replacement="docker/setup-buildx-action@v3";;
                "docker/build-push-action@v4") replacement="docker/build-push-action@v5";;
                "docker/login-action@v2") replacement="docker/login-action@v3";;
                "docker/metadata-action@v4") replacement="docker/metadata-action@v5";;
            esac
            
            if [ ! -z "$replacement" ]; then
                echo "${RED}✗ Found deprecated action: $action${NC}"
                echo "  ${YELLOW}→ Update to: $replacement${NC}"
                echo "  Fix command: sed -i '' 's|$action|$replacement|g' $workflow"
                return 1
            fi
            return 0
        }
        
        for WORKFLOW in $WORKFLOW_FILES; do
            echo "Checking $WORKFLOW..."
            WORKFLOW_FAILED=0
            
            # Check YAML syntax
            if command -v yq >/dev/null 2>&1; then
                yq eval '.' "$WORKFLOW" > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                    echo "${RED}✗ Invalid YAML syntax in $WORKFLOW${NC}"
                    WORKFLOW_FAILED=1
                    FAILED=1
                fi
            elif command -v python3 >/dev/null 2>&1; then
                python3 -c "import yaml; yaml.safe_load(open('$WORKFLOW'))" 2>/dev/null
                if [ $? -ne 0 ]; then
                    echo "${RED}✗ Invalid YAML syntax in $WORKFLOW${NC}"
                    WORKFLOW_FAILED=1
                    FAILED=1
                fi
            fi
            
            # Check for deprecated actions
            ACTIONS=$(grep -E "uses:\s*[^#]+" "$WORKFLOW" | sed 's/.*uses:\s*//' | tr -d ' ')
            for ACTION in $ACTIONS; do
                if check_deprecated_action "$ACTION" "$WORKFLOW"; then
                    :  # Action is OK
                else
                    WORKFLOW_FAILED=1
                    FAILED=1
                fi
            done
            
            # Check for missing versions
            ACTIONS_WITHOUT_VERSION=$(grep -E "uses:\s*[^@]+/[^@]+\s*$" "$WORKFLOW" 2>/dev/null | grep -v "#")
            if [ ! -z "$ACTIONS_WITHOUT_VERSION" ]; then
                echo "${RED}✗ Found actions without version in $WORKFLOW:${NC}"
                echo "$ACTIONS_WITHOUT_VERSION"
                echo "${YELLOW}  → Add version tags (e.g., @v4)${NC}"
                WORKFLOW_FAILED=1
                FAILED=1
            fi
            
            # Check for branch references
            BRANCH_REFS=$(grep -E "uses:.*@(main|master|develop)" "$WORKFLOW" 2>/dev/null)
            if [ ! -z "$BRANCH_REFS" ]; then
                echo "${YELLOW}⚠ Found branch references in $WORKFLOW:${NC}"
                echo "$BRANCH_REFS"
                echo "${YELLOW}  → Consider using version tags for stability${NC}"
            fi
            
            # Check for Docker latest tags
            DOCKER_LATEST=$(grep -E "docker://.*:latest" "$WORKFLOW" 2>/dev/null)
            if [ ! -z "$DOCKER_LATEST" ]; then
                echo "${RED}✗ Found Docker :latest tags in $WORKFLOW:${NC}"
                echo "$DOCKER_LATEST"
                echo "${YELLOW}  → Use specific version tags for reproducibility${NC}"
                WORKFLOW_FAILED=1
                FAILED=1
            fi
            
            # Check required properties
            if ! grep -q "^name:" "$WORKFLOW"; then
                echo "${RED}✗ Missing 'name' property in $WORKFLOW${NC}"
                WORKFLOW_FAILED=1
                FAILED=1
            fi
            
            if ! grep -q "^on:" "$WORKFLOW"; then
                echo "${RED}✗ Missing 'on' property in $WORKFLOW${NC}"
                WORKFLOW_FAILED=1
                FAILED=1
            fi
            
            if ! grep -q "^jobs:" "$WORKFLOW"; then
                echo "${RED}✗ Missing 'jobs' property in $WORKFLOW${NC}"
                WORKFLOW_FAILED=1
                FAILED=1
            fi
            
            if [ $WORKFLOW_FAILED -eq 0 ]; then
                echo "${GREEN}✓ $WORKFLOW validation passed${NC}"
            fi
        done
        
        # Offer batch fix if issues found
        if [ $FAILED -ne 0 ]; then
            echo ""
            echo "${YELLOW}To fix all deprecated actions at once, run:${NC}"
            cat << 'EOF'
find .github/workflows -name '*.yml' -o -name '*.yaml' | while read f; do
  sed -i '' -e 's|actions/checkout@v3|actions/checkout@v4|g' \
            -e 's|actions/setup-java@v3|actions/setup-java@v4|g' \
            -e 's|actions/setup-node@v3|actions/setup-node@v4|g' \
            -e 's|actions/setup-python@v4|actions/setup-python@v5|g' \
            -e 's|actions/upload-artifact@v3|actions/upload-artifact@v4|g' \
            -e 's|actions/download-artifact@v3|actions/download-artifact@v4|g' \
            -e 's|actions/cache@v3|actions/cache@v4|g' \
            -e 's|docker/setup-buildx-action@v2|docker/setup-buildx-action@v3|g' \
            -e 's|docker/build-push-action@v4|docker/build-push-action@v5|g' \
            -e 's|docker/login-action@v2|docker/login-action@v3|g' \
            -e 's|docker/metadata-action@v4|docker/metadata-action@v5|g' "$f"
done
EOF
        fi
    fi
fi

# Run Java checks if Java files are staged
if has_staged_files "\.java$"; then
    echo "${YELLOW}Running Java quality checks...${NC}"
    
    # First check if build.gradle was modified to ensure dependencies are correct
    if has_staged_files "build\.gradle$"; then
        echo "Checking build dependencies..."
        # Ensure SnakeYAML is available if needed
        if grep -r "import org.yaml.snakeyaml" src/main/java 2>/dev/null | grep -q .; then
            if ! grep -q "implementation.*snakeyaml" build.gradle; then
                echo "${RED}✗ SnakeYAML used in main code but not in implementation dependencies${NC}"
                echo "Add to build.gradle: implementation 'org.yaml:snakeyaml:2.0'"
                FAILED=1
            fi
        fi
    fi
    
    # Ensure Java version compatibility
    JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | cut -d. -f1)
    if [ "$JAVA_VERSION" -ne 21 ]; then
        echo "${YELLOW}⚠ Warning: Using Java $JAVA_VERSION but project requires Java 21${NC}"
        echo "  CI/CD will fail with different Java version"
        echo "  Use: export JAVA_HOME=\$(/usr/libexec/java_home -v 21)"
    fi
    
    # Run Checkstyle
    echo "Running Checkstyle..."
    ./gradlew checkstyleMain checkstyleTest --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ Checkstyle found violations${NC}"
        echo "Run './gradlew checkstyleMain checkstyleTest' to see details"
        FAILED=1
    else
        echo "${GREEN}✓ Checkstyle passed${NC}"
    fi
    
    # Run PMD
    echo "Running PMD..."
    ./gradlew pmdMain pmdTest --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ PMD found violations${NC}"
        echo "Run './gradlew pmdMain pmdTest' to see details"
        FAILED=1
    else
        echo "${GREEN}✓ PMD passed${NC}"
    fi
    
    # Run SpotBugs
    echo "Running SpotBugs..."
    ./gradlew spotbugsMain spotbugsTest --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ SpotBugs found issues${NC}"
        echo "Run './gradlew spotbugsMain spotbugsTest' to see details"
        FAILED=1
    else
        echo "${GREEN}✓ SpotBugs passed${NC}"
    fi
    
    # Compile check
    echo "Running compilation check..."
    ./gradlew compileJava compileTestJava --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ Compilation failed${NC}"
        echo "Run './gradlew compileJava compileTestJava' to see errors"
        FAILED=1
    else
        echo "${GREEN}✓ Compilation successful${NC}"
    fi
    
    # Run tests for modified files
    echo "Running related tests..."
    # Get list of modified Java files
    MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.java$" | grep -v "Test\.java$")
    if [ ! -z "$MODIFIED_FILES" ]; then
        # Run tests only for modules with changes
        MODULES=$(echo "$MODIFIED_FILES" | cut -d'/' -f1 | sort | uniq | grep -E "^(api|database)$")
        for MODULE in $MODULES; do
            echo "Running tests for $MODULE module..."
            
            # Special handling for database module to ensure test config is correct
            if [ "$MODULE" = "database" ]; then
                # Check if test configuration exists
                if [ ! -f "database/src/test/resources/application-test.properties" ]; then
                    echo "${RED}✗ Missing database test configuration${NC}"
                    echo "Create database/src/test/resources/application-test.properties"
                    FAILED=1
                    continue
                fi
                
                # For local tests, use test profile (CI will override with environment vars)
                export SPRING_PROFILES_ACTIVE=test
            fi
            
            ./gradlew :$MODULE:test --daemon --parallel > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo "${RED}✗ Tests failed in $MODULE module${NC}"
                echo "Run './gradlew :$MODULE:test' to see failures"
                echo "For database tests, ensure PostgreSQL is running locally"
                FAILED=1
            else
                echo "${GREEN}✓ Tests passed in $MODULE module${NC}"
            fi
        done
    fi
fi

# Run TypeScript/React checks if UI files are staged
if has_staged_files "ui-components/.*\.\(ts\|tsx\|js\|jsx\)$"; then
    echo "${YELLOW}Running UI quality checks...${NC}"
    
    # Run ESLint
    echo "Running ESLint..."
    cd ui-components
    npm run lint > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ ESLint found violations${NC}"
        echo "Run 'npm run lint' in ui-components to see details"
        FAILED=1
    else
        echo "${GREEN}✓ ESLint passed${NC}"
    fi
    
    # Run TypeScript compilation
    echo "Running TypeScript check..."
    npm run type-check > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ TypeScript errors found${NC}"
        echo "Run 'npm run type-check' in ui-components to see errors"
        FAILED=1
    else
        echo "${GREEN}✓ TypeScript check passed${NC}"
    fi
    
    # Run Prettier check
    echo "Running Prettier check..."
    npm run format:check > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ Formatting issues found${NC}"
        echo "Run 'npm run format' in ui-components to fix formatting"
        FAILED=1
    else
        echo "${GREEN}✓ Prettier check passed${NC}"
    fi
    
    cd "$PROJECT_ROOT"
fi

# Check for debugging statements
echo "Checking for debugging statements..."
DEBUGGING_PATTERNS="console\.log\|System\.out\.print\|printStackTrace\|debugger\|TODO\|FIXME\|XXX"
DEBUGGING_FOUND=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -n "$DEBUGGING_PATTERNS" 2>/dev/null)
if [ ! -z "$DEBUGGING_FOUND" ]; then
    echo "${YELLOW}⚠ Found debugging statements:${NC}"
    echo "$DEBUGGING_FOUND" | head -5
    echo "${YELLOW}Consider removing these before committing${NC}"
fi

# Check for large files
echo "Checking for large files..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9}')
if [ ! -z "$LARGE_FILES" ]; then
    echo "${YELLOW}⚠ Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES"
    echo "${YELLOW}Consider using Git LFS for large files${NC}"
fi

# Final result
echo ""
if [ $FAILED -ne 0 ]; then
    echo "${RED}✗ Pre-commit checks failed!${NC}"
    echo "Fix the issues above and try again."
    echo "To bypass these checks (not recommended), use: git commit --no-verify"
    exit 1
else
    echo "${GREEN}✓ All pre-commit checks passed!${NC}"
    exit 0
fi