#!/bin/sh
#
# Pre-commit hook for ProductDomain project
# This hook runs quality checks before allowing a commit
#

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "Running pre-commit quality checks..."

# Store the current directory
PROJECT_ROOT=$(git rev-parse --show-toplevel)
cd "$PROJECT_ROOT"

# Function to check if files of a certain type have been staged
has_staged_files() {
    git diff --cached --name-only --diff-filter=ACM | grep -q "$1"
}

# Track overall status
FAILED=0

# Run Java checks if Java files are staged
if has_staged_files "\.java$"; then
    echo "${YELLOW}Running Java quality checks...${NC}"
    
    # Run Checkstyle
    echo "Running Checkstyle..."
    ./gradlew checkstyleMain checkstyleTest --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ Checkstyle found violations${NC}"
        echo "Run './gradlew checkstyleMain checkstyleTest' to see details"
        FAILED=1
    else
        echo "${GREEN}✓ Checkstyle passed${NC}"
    fi
    
    # Run PMD
    echo "Running PMD..."
    ./gradlew pmdMain pmdTest --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ PMD found violations${NC}"
        echo "Run './gradlew pmdMain pmdTest' to see details"
        FAILED=1
    else
        echo "${GREEN}✓ PMD passed${NC}"
    fi
    
    # Run SpotBugs
    echo "Running SpotBugs..."
    ./gradlew spotbugsMain spotbugsTest --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ SpotBugs found issues${NC}"
        echo "Run './gradlew spotbugsMain spotbugsTest' to see details"
        FAILED=1
    else
        echo "${GREEN}✓ SpotBugs passed${NC}"
    fi
    
    # Compile check
    echo "Running compilation check..."
    ./gradlew compileJava compileTestJava --daemon --parallel > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ Compilation failed${NC}"
        echo "Run './gradlew compileJava compileTestJava' to see errors"
        FAILED=1
    else
        echo "${GREEN}✓ Compilation successful${NC}"
    fi
    
    # Run tests for modified files
    echo "Running related tests..."
    # Get list of modified Java files
    MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.java$" | grep -v "Test\.java$")
    if [ ! -z "$MODIFIED_FILES" ]; then
        # Run tests only for modules with changes
        MODULES=$(echo "$MODIFIED_FILES" | cut -d'/' -f1 | sort | uniq | grep -E "^(api|database)$")
        for MODULE in $MODULES; do
            echo "Running tests for $MODULE module..."
            ./gradlew :$MODULE:test --daemon --parallel > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo "${RED}✗ Tests failed in $MODULE module${NC}"
                echo "Run './gradlew :$MODULE:test' to see failures"
                FAILED=1
            else
                echo "${GREEN}✓ Tests passed in $MODULE module${NC}"
            fi
        done
    fi
fi

# Run TypeScript/React checks if UI files are staged
if has_staged_files "ui-components/.*\.\(ts\|tsx\|js\|jsx\)$"; then
    echo "${YELLOW}Running UI quality checks...${NC}"
    
    # Run ESLint
    echo "Running ESLint..."
    cd ui-components
    npm run lint > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ ESLint found violations${NC}"
        echo "Run 'npm run lint' in ui-components to see details"
        FAILED=1
    else
        echo "${GREEN}✓ ESLint passed${NC}"
    fi
    
    # Run TypeScript compilation
    echo "Running TypeScript check..."
    npm run type-check > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ TypeScript errors found${NC}"
        echo "Run 'npm run type-check' in ui-components to see errors"
        FAILED=1
    else
        echo "${GREEN}✓ TypeScript check passed${NC}"
    fi
    
    # Run Prettier check
    echo "Running Prettier check..."
    npm run format:check > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}✗ Formatting issues found${NC}"
        echo "Run 'npm run format' in ui-components to fix formatting"
        FAILED=1
    else
        echo "${GREEN}✓ Prettier check passed${NC}"
    fi
    
    cd "$PROJECT_ROOT"
fi

# Check for debugging statements
echo "Checking for debugging statements..."
DEBUGGING_PATTERNS="console\.log\|System\.out\.print\|printStackTrace\|debugger\|TODO\|FIXME\|XXX"
DEBUGGING_FOUND=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -n "$DEBUGGING_PATTERNS" 2>/dev/null)
if [ ! -z "$DEBUGGING_FOUND" ]; then
    echo "${YELLOW}⚠ Found debugging statements:${NC}"
    echo "$DEBUGGING_FOUND" | head -5
    echo "${YELLOW}Consider removing these before committing${NC}"
fi

# Check for large files
echo "Checking for large files..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9}')
if [ ! -z "$LARGE_FILES" ]; then
    echo "${YELLOW}⚠ Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES"
    echo "${YELLOW}Consider using Git LFS for large files${NC}"
fi

# Final result
echo ""
if [ $FAILED -ne 0 ]; then
    echo "${RED}✗ Pre-commit checks failed!${NC}"
    echo "Fix the issues above and try again."
    echo "To bypass these checks (not recommended), use: git commit --no-verify"
    exit 1
else
    echo "${GREEN}✓ All pre-commit checks passed!${NC}"
    exit 0
fi