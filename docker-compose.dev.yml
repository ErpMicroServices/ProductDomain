version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: productdomain-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-productdomain}
      POSTGRES_USER: ${POSTGRES_USER:-productuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-productpass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-productuser} -d ${POSTGRES_DB:-productdomain}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: productdomain-redis-dev
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redispass}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: builder  # Use builder stage for development
    container_name: productdomain-api-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-productdomain}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-productuser}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-productpass}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
      SPRING_GRAPHQL_GRAPHIQL_ENABLED: "true"
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: "true"
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
      - "35729:35729"  # LiveReload port
    volumes:
      - ./api/src:/app/src:delegated
      - ./api/build.gradle:/app/build.gradle:ro
      - gradle_cache:/home/gradle/.gradle
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["gradle", "bootRun", "--no-daemon", "--continuous"]

  # UI Service
  ui:
    build:
      context: ./ui-components
      dockerfile: Dockerfile
      target: builder  # Use builder stage for development
    container_name: productdomain-ui-dev
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: ${API_BASE_URL:-http://localhost:8080}
      CHOKIDAR_USEPOLLING: "true"  # For file watching in containers
    ports:
      - "3000:3000"
      - "3001:3001"  # Vite HMR port
    volumes:
      - ./ui-components/src:/app/src:delegated
      - ./ui-components/public:/app/public:delegated
      - ./ui-components/index.html:/app/index.html:delegated
      - ./ui-components/vite.config.ts:/app/vite.config.ts:ro
      - ./ui-components/tsconfig.json:/app/tsconfig.json:ro
      - ./ui-components/package.json:/app/package.json:ro
      - node_modules:/app/node_modules
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

networks:
  backend:
    driver: bridge
    name: productdomain-backend
  frontend:
    driver: bridge
    name: productdomain-frontend

volumes:
  postgres_data:
    name: productdomain-postgres-data
  redis_data:
    name: productdomain-redis-data
  gradle_cache:
    name: productdomain-gradle-cache
  node_modules:
    name: productdomain-node-modules