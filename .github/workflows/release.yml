name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          echo "📦 Preparing release ${VERSION}"
          
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
          fromTag: ${{ steps.version.outputs.tag }}
          toTag: HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
          
      - name: Update version in build files
        run: |
          # Update version in build.gradle
          sed -i "s/version = '.*'/version = '${{ needs.prepare-release.outputs.version }}'/" build.gradle
          
          # Update version in package.json
          cd ui-components
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version
          cd ..
          
      - name: Build all modules
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test
          
      - name: Build UI production bundle
        run: |
          cd ui-components
          npm ci
          npm run build
          cd ..
          
      - name: Create distribution archives
        run: |
          # Create API distribution
          mkdir -p dist/api
          cp api/build/libs/*.jar dist/api/
          cp api/Dockerfile dist/api/
          cp -r api/src/main/resources dist/api/
          tar -czf productdomain-api-${{ needs.prepare-release.outputs.version }}.tar.gz -C dist api
          
          # Create UI distribution
          mkdir -p dist/ui
          cp -r ui-components/dist/* dist/ui/
          cp ui-components/Dockerfile dist/ui/
          cp ui-components/nginx.conf dist/ui/
          tar -czf productdomain-ui-${{ needs.prepare-release.outputs.version }}.tar.gz -C dist ui
          
          # Create database scripts distribution
          mkdir -p dist/database
          cp -r database/src/main/sql/* dist/database/
          tar -czf productdomain-database-${{ needs.prepare-release.outputs.version }}.tar.gz -C dist database
          
      - name: Generate checksums
        run: |
          sha256sum *.tar.gz > checksums.txt
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            *.tar.gz
            checksums.txt
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-artifacts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          
      - name: Create release notes
        run: |
          cat > release-notes.md << EOF
          # Release ${{ needs.prepare-release.outputs.version }}
          
          ## 🎉 Highlights
          
          This release includes improvements to the Product Domain microservice.
          
          ## 📦 Artifacts
          
          - **API JAR**: productdomain-api-${{ needs.prepare-release.outputs.version }}.tar.gz
          - **UI Bundle**: productdomain-ui-${{ needs.prepare-release.outputs.version }}.tar.gz
          - **Database Scripts**: productdomain-database-${{ needs.prepare-release.outputs.version }}.tar.gz
          
          ## 🐳 Docker Images
          
          \`\`\`bash
          docker pull erpmicroservices/productdomain-api:${{ needs.prepare-release.outputs.version }}
          docker pull erpmicroservices/productdomain-ui:${{ needs.prepare-release.outputs.version }}
          \`\`\`
          
          ## 📋 Changelog
          
          ${{ needs.prepare-release.outputs.changelog }}
          
          ## ✅ Checksums
          
          \`\`\`
          $(cat checksums.txt)
          \`\`\`
          
          ## 🚀 Deployment
          
          See the [deployment guide](docs/deployment.md) for instructions.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            *.tar.gz
            checksums.txt
          generate_release_notes: true

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update version references
        run: |
          # Update README
          sed -i "s/version: .*/version: ${{ needs.prepare-release.outputs.version }}/" README.md
          
          # Update documentation
          find docs -name "*.md" -type f -exec sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/${{ needs.prepare-release.outputs.tag }}/g" {} \;
          
      - name: Create PR for documentation updates
        uses: peter-evans/create-pull-request@v7
        with:
          title: "docs: Update documentation for ${{ needs.prepare-release.outputs.version }} release"
          body: |
            This PR updates the documentation to reflect the ${{ needs.prepare-release.outputs.version }} release.
            
            - Updated version references in README
            - Updated version references in documentation
            
            Auto-generated by release workflow.
          branch: docs/release-${{ needs.prepare-release.outputs.version }}
          commit-message: "docs: Update for ${{ needs.prepare-release.outputs.version }} release"
          labels: documentation
          assignees: JimBarrows

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Release ${{ needs.prepare-release.outputs.version }} has been published!
            
            View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Create release issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ needs.prepare-release.outputs.version }} - Post Release Tasks`,
              body: `## Post Release Tasks for ${{ needs.prepare-release.outputs.version }}
              
              - [ ] Verify Docker images are available
              - [ ] Update deployment documentation
              - [ ] Notify stakeholders
              - [ ] Monitor production deployment
              - [ ] Update project roadmap
              - [ ] Close completed milestone
              - [ ] Create next milestone
              
              Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}`,
              labels: ['release', 'task'],
              assignees: ['JimBarrows']
            });