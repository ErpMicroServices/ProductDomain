name: Main CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
    
env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.5'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For better analysis
          
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        
      - name: Run PMD
        run: ./gradlew pmdMain pmdTest
        
      - name: Run SpotBugs
        run: ./gradlew spotbugsMain spotbugsTest
        
      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            **/build/reports/checkstyle/
            **/build/reports/pmd/
            **/build/reports/spotbugs/
          retention-days: 30

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        module: [api, database, ui-components]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        if: matrix.module != 'ui-components'
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        if: matrix.module == 'ui-components'
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui-components/package-lock.json
          
      - name: Run Java Tests
        if: matrix.module != 'ui-components'
        run: |
          chmod +x gradlew
          ./gradlew :${{ matrix.module }}:test :${{ matrix.module }}:jacocoTestReport
          
      - name: Run UI Tests
        if: matrix.module == 'ui-components'
        run: |
          cd ui-components
          npm ci
          npm test -- --coverage
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.module }}
          path: |
            ${{ matrix.module }}/build/reports/tests/
            ${{ matrix.module }}/build/test-results/
            ui-components/coverage/
          retention-days: 30
          
      - name: Publish Test Report
        uses: dorny/test-reporter@v2
        if: always() && matrix.module != 'ui-components'
        with:
          name: Test Results - ${{ matrix.module }}
          path: '${{ matrix.module }}/build/test-results/test/*.xml'
          reporter: java-junit
          fail-on-error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: productuser
          POSTGRES_PASSWORD: productpass
          POSTGRES_DB: productdomain
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Integration Tests
        run: ./gradlew integrationTest
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/productdomain
          SPRING_DATASOURCE_USERNAME: productuser
          SPRING_DATASOURCE_PASSWORD: productpass
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379
          
      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            **/build/reports/tests/integrationTest/
            **/build/test-results/integrationTest/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run OWASP Dependency Check
        run: ./gradlew dependencyCheckAnalyze
        
      - name: Upload OWASP Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: build/reports/dependency-check/
          retention-days: 30
          
      - name: Check for High Severity Vulnerabilities
        run: |
          if grep -q "VULNERABILITY" build/reports/dependency-check/dependency-check-report.html; then
            echo "⚠️ Vulnerabilities found in dependencies"
            exit 1
          fi

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build JAR artifacts
        run: ./gradlew build -x test
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/build/libs/*.jar
            !**/build/libs/*-plain.jar
          retention-days: 30

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan, build-artifacts]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Generate Summary Report
        run: |
          echo "# CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Add status for each job
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "| Code Quality | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Code Quality | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "| Security Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-artifacts.result }}" == "success" ]]; then
            echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "All reports and artifacts have been uploaded and are available in the workflow run." >> $GITHUB_STEP_SUMMARY
          
      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const summary = `## 🔍 CI Pipeline Summary
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Build | ${{ needs.build-artifacts.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            [View full results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });