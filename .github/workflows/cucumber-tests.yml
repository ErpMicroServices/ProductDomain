name: Cucumber BDD Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Cucumber tags to run (e.g., @smoke, @regression)'
        required: false
        default: 'not @ignore and not @manual'

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.5'
  
jobs:
  cucumber-tests:
    name: Run Cucumber Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: productuser
          POSTGRES_PASSWORD: productpass
          POSTGRES_DB: productdomain
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Create test database
        run: |
          PGPASSWORD=productpass psql -h localhost -U productuser -d productdomain -c "CREATE DATABASE productdomain_test;"
          PGPASSWORD=productpass psql -h localhost -U productuser -d productdomain -c "CREATE USER productdomain_test WITH PASSWORD 'productdomain_test';"
          PGPASSWORD=productpass psql -h localhost -U productuser -d productdomain -c "GRANT ALL PRIVILEGES ON DATABASE productdomain_test TO productdomain_test;"
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Cucumber tests
        run: |
          if [ -n "${{ github.event.inputs.tags }}" ]; then
            ./gradlew cucumberTest -Dcucumber.filter.tags="${{ github.event.inputs.tags }}"
          else
            ./gradlew cucumberTest
          fi
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/productdomain_test
          SPRING_DATASOURCE_USERNAME: productdomain_test
          SPRING_DATASOURCE_PASSWORD: productdomain_test
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379
          
      - name: Generate Cucumber reports
        if: always()
        run: ./gradlew generateCucumberReports
        
      - name: Upload Cucumber reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-reports
          path: |
            target/cucumber-reports/
            build/cucumber-html-reports/
          retention-days: 30
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/test-results/test/
            **/build/reports/tests/test/
          retention-days: 30
          
      - name: Publish test results
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Cucumber Test Results
          path: 'target/cucumber-reports/*.xml'
          reporter: java-junit
          fail-on-error: false
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test summary if available
            let summary = '## Cucumber Test Results\n\n';
            
            try {
              const reportPath = 'build/cucumber-html-reports/overview-features.html';
              if (fs.existsSync(reportPath)) {
                summary += '✅ [View Full Cucumber Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n';
              }
            } catch (error) {
              summary += '❌ No test report generated\n\n';
            }
            
            // Add summary to PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  parallel-cucumber-tests:
    name: Run Cucumber Tests in Parallel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        group: [1, 2, 3, 4]
        
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: productuser
          POSTGRES_PASSWORD: productpass
          POSTGRES_DB: productdomain
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Create test database for parallel execution
        run: |
          PGPASSWORD=productpass psql -h localhost -U productuser -d productdomain -c "CREATE DATABASE productdomain_test_${{ matrix.group }};"
          PGPASSWORD=productpass psql -h localhost -U productuser -d productdomain -c "CREATE USER productdomain_test_${{ matrix.group }} WITH PASSWORD 'productdomain_test';"
          PGPASSWORD=productpass psql -h localhost -U productuser -d productdomain -c "GRANT ALL PRIVILEGES ON DATABASE productdomain_test_${{ matrix.group }} TO productdomain_test_${{ matrix.group }};"
          
      - name: Run parallel Cucumber tests
        run: |
          ./gradlew cucumberTest \
            -Dcucumber.execution.parallel.enabled=true \
            -Dcucumber.execution.parallel.config.strategy=fixed \
            -Dcucumber.execution.parallel.config.fixed.parallelism=4 \
            -Dtest.group=${{ matrix.group }}
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/productdomain_test_${{ matrix.group }}
          SPRING_DATASOURCE_USERNAME: productdomain_test_${{ matrix.group }}
          
      - name: Upload parallel test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: parallel-cucumber-reports-${{ matrix.group }}
          path: target/cucumber-reports/
          retention-days: 7

  performance-tests:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Run performance tests
        run: ./gradlew cucumberTest -Dcucumber.filter.tags="@performance"
        
      - name: Analyze performance results
        run: |
          # Add performance analysis script here
          echo "Performance test analysis would go here"
          
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: build/reports/performance/
          retention-days: 90