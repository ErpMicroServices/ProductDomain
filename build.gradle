plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0' apply false
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.spotbugs' version '6.0.4' apply false
    id 'org.owasp.dependencycheck' version '9.0.7' apply false
    id 'org.sonarqube' version '4.4.1.3373'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
}

// Root project dependencies for quality tool tests
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'io.cucumber:cucumber-spring:7.15.0'
    testImplementation 'org.yaml:snakeyaml:2.0'
    testImplementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'net.masterthought:cucumber-reporting:5.7.7'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    testImplementation 'org.junit.platform:junit-platform-suite:1.10.1'
    
    // Spring dependencies for BDD framework
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-jdbc:3.5.0'
}

// Configure root project Java
java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

// Apply Spring dependency management
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.0"
    }
}

// Test configuration for root project
test {
    useJUnitPlatform()
}

allprojects {
    group = 'com.erpmicroservices'
    version = '1.0.0-SNAPSHOT'
    
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
    
    configurations.all {
        resolutionStrategy {
            // Force specific versions to avoid conflicts
            force 'org.yaml:snakeyaml:2.0'
            // Exclude android variants
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.yaml' && details.requested.name == 'snakeyaml') {
                    details.useVersion '2.0'
                    details.because 'Force standard SnakeYAML version'
                }
            }
        }
        
        // Exclude android variants will be handled by resolution strategy
    }
}

// SonarQube configuration
sonarqube {
    properties {
        property "sonar.projectKey", "ProductDomain"
        property "sonar.projectName", "Product Domain Microservice"
        property "sonar.projectVersion", version
        property "sonar.sourceEncoding", "UTF-8"
        
        // Skip compilation - we'll compile separately
        property "sonar.gradle.skipCompile", "true"
        
        // Language-specific settings
        property "sonar.java.source", "21"
        property "sonar.java.target", "21"
        
        // Coverage
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
        
        // Exclusions
        property "sonar.exclusions", "**/generated/**,**/build/**,**/test/**,**/*Test.java,**/*Tests.java"
        property "sonar.coverage.exclusions", "**/config/**,**/dto/**,**/entity/**,**/*Application.java"
        
        // Quality gates
        property "sonar.qualitygate.wait", "true"
        
        // Links to other reports
        property "sonar.java.checkstyle.reportPaths", subprojects.findAll { it.name != 'ui-components' }
            .collect { "${it.buildDir}/reports/checkstyle/main.xml,${it.buildDir}/reports/checkstyle/test.xml" }
            .join(',')
        property "sonar.java.pmd.reportPaths", subprojects.findAll { it.name != 'ui-components' }
            .collect { "${it.buildDir}/reports/pmd/main.xml,${it.buildDir}/reports/pmd/test.xml" }
            .join(',')
        property "sonar.java.spotbugs.reportPaths", subprojects.findAll { it.name != 'ui-components' }
            .collect { "${it.buildDir}/reports/spotbugs/main.xml,${it.buildDir}/reports/spotbugs/test.xml" }
            .join(',')
    }
}

subprojects {
    // Only apply Java plugins to Java modules
    if (name != 'ui-components') {
        apply plugin: 'java'
        apply plugin: 'java-library'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'checkstyle'
        apply plugin: 'pmd'
        apply plugin: 'com.github.spotbugs'
        apply plugin: 'jacoco'
        apply plugin: 'org.owasp.dependencycheck'
    }
    
    // Java configuration only for Java modules
    if (name != 'ui-components') {
        java {
            sourceCompatibility = '21'
            targetCompatibility = '21'
            withJavadocJar()
            withSourcesJar()
        }
    }
    
    // Java-specific configuration
    if (name != 'ui-components') {
        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }
        
        // Dependency management
        dependencyManagement {
            imports {
                mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.0"
            }
        }
        
        // Common dependencies for all Java modules
        dependencies {
            // Lombok
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            
            // Testing
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
            testImplementation 'org.junit.jupiter:junit-jupiter'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'org.assertj:assertj-core'
            
            // Logging
            implementation 'org.slf4j:slf4j-api'
        }
        
        // Test configuration
        test {
            useJUnitPlatform()
            maxHeapSize = '1G'
            
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
            
            finalizedBy jacocoTestReport
        }
        
        // JaCoCo configuration
        jacoco {
            toolVersion = '0.8.11'
        }
        
        jacocoTestReport {
            dependsOn test
            reports {
                xml.required = true
                html.required = true
                csv.required = false
            }
        }
        
        // Checkstyle configuration
        checkstyle {
            toolVersion = '10.12.5'
            configFile = rootProject.file('config/checkstyle/checkstyle.xml')
            ignoreFailures = false
            maxWarnings = 0
        }
        
        // PMD configuration
        pmd {
            toolVersion = '6.55.0'
            consoleOutput = true
            ignoreFailures = false
            ruleSetFiles = files(rootProject.file('config/pmd/ruleset.xml'))
            ruleSets = []
        }
        
        // SpotBugs configuration
        spotbugs {
            toolVersion = '4.8.2'
            ignoreFailures = false
            excludeFilter = rootProject.file('config/spotbugs/exclude.xml')
        }
        
        spotbugsMain {
            reports {
                html {
                    required = true
                    outputLocation = file("$buildDir/reports/spotbugs/main.html")
                    stylesheet = 'fancy-hist.xsl'
                }
            }
        }
        
        spotbugsTest {
            reports {
                html {
                    required = true
                    outputLocation = file("$buildDir/reports/spotbugs/test.html")
                    stylesheet = 'fancy-hist.xsl'
                }
            }
        }
        
        // OWASP Dependency Check configuration
        dependencyCheck {
            failBuildOnCVSS = 7  // Fail on high severity vulnerabilities
            suppressionFile = rootProject.file('config/owasp/suppressions.xml')
            analyzers {
                assemblyEnabled = false
                nugetconfEnabled = false
                nodeEnabled = name == 'ui-components'
            }
            formats = ['HTML', 'JSON', 'JUNIT']
            outputDirectory = file("$buildDir/reports/dependency-check")
            scanConfigurations = ['runtimeClasspath']
            skipConfigurations = ['checkstyle', 'pmd', 'spotbugs', 'jacocoAgent', 'jacocoAnt']
        }
    }
}

// Configure modules that use Spring Boot
configure(subprojects.findAll { it.name in ['api', 'database'] }) {
    apply plugin: 'org.springframework.boot'
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }
    
    bootJar {
        enabled = true
    }
    
    jar {
        enabled = true
    }
}

// Root project tasks
task buildAll {
    description = 'Build all modules'
    group = 'build'
    dependsOn subprojects.findAll { it.tasks.findByName('build') }*.build
}

task testAll {
    description = 'Run tests in all modules'
    group = 'verification'
    dependsOn subprojects.findAll { it.tasks.findByName('test') }*.test
}

task checkAll {
    description = 'Run all quality checks'
    group = 'verification'
    dependsOn subprojects.findAll { it.tasks.findByName('check') }*.check
}

task cleanAll {
    description = 'Clean all modules'
    group = 'build'
    dependsOn subprojects.findAll { it.tasks.findByName('clean') }*.clean
}

// Coverage report aggregation
task jacocoRootReport(type: JacocoReport) {
    description = 'Aggregate JaCoCo coverage reports'
    group = 'verification'
    
    def javaProjects = subprojects.findAll { it.name != 'ui-components' }
    
    dependsOn = javaProjects.test
    
    sourceDirectories.from = javaProjects.sourceSets.main.allSource.srcDirs
    classDirectories.from = javaProjects.sourceSets.main.output
    executionData.from = javaProjects.jacocoTestReport.executionData
    
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

// Git hooks configuration
task installGitHooks(type: Exec) {
    description = 'Install Git hooks for the project'
    group = 'git'
    commandLine 'sh', './gradle/git-hooks/install-hooks.sh'
}

task uninstallGitHooks(type: Exec) {
    description = 'Uninstall Git hooks for the project'
    group = 'git'
    commandLine 'sh', './gradle/git-hooks/uninstall-hooks.sh'
}

// Quality report aggregation
task qualityReport {
    description = 'Generate aggregated quality report'
    group = 'verification'
    
    dependsOn subprojects.findAll { it.name != 'ui-components' }.collect { project ->
        [":${project.name}:checkstyleMain", ":${project.name}:checkstyleTest",
         ":${project.name}:pmdMain", ":${project.name}:pmdTest",
         ":${project.name}:spotbugsMain", ":${project.name}:spotbugsTest",
         ":${project.name}:test", ":${project.name}:jacocoTestReport"]
    }.flatten()
    
    doLast {
        def reportDir = file("$buildDir/reports/quality")
        reportDir.mkdirs()
        
        def htmlReport = new File(reportDir, "index.html")
        htmlReport.text = generateQualityReportHtml()
        
        println "Quality report generated at: ${htmlReport.absolutePath}"
    }
}

// Cucumber report generation
task generateCucumberReports(type: JavaExec) {
    description = 'Generate Cucumber HTML reports from JSON output'
    group = 'reporting'
    
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.erpmicroservices.productdomain.bdd.reporting.CucumberReportGenerator'
    
    args = [
        "${buildDir}/cucumber-html-reports",
        project.name,
        System.getenv('BUILD_NUMBER') ?: 'local'
    ]
    
    doFirst {
        // Ensure JSON reports exist
        def jsonReports = fileTree(dir: 'target/cucumber-reports', include: '*.json')
        if (jsonReports.empty) {
            logger.warn("No Cucumber JSON reports found. Run tests first.")
        }
    }
}

// Run Cucumber tests with report generation
task cucumberTest {
    description = 'Run Cucumber tests and generate reports'
    group = 'verification'
    
    dependsOn test
    finalizedBy generateCucumberReports
}

// Configure test task to generate Cucumber reports
test {
    useJUnitPlatform {
        includeTags 'cucumber'
    }
    
    // Ensure Cucumber reports directory exists
    doFirst {
        file('target/cucumber-reports').mkdirs()
    }
    
    // Generate reports after test execution
    finalizedBy generateCucumberReports
}

// SonarQube analysis task
task sonarqubeAnalysis {
    description = 'Run SonarQube analysis with all quality reports'
    group = 'verification'
    
    dependsOn jacocoRootReport, qualityReport
    finalizedBy sonarqube
    
    doFirst {
        println "Running SonarQube analysis..."
        println "Make sure SonarQube server is running and configured"
        println "Set SONAR_HOST_URL and SONAR_TOKEN environment variables or pass them as properties"
    }
}

def generateQualityReportHtml() {
    def timestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
    return """
<!DOCTYPE html>
<html>
<head>
    <title>ProductDomain Quality Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1, h2 { color: #333; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .success { background-color: #d4edda; border-color: #c3e6cb; }
        .warning { background-color: #fff3cd; border-color: #ffeeba; }
        .error { background-color: #f8d7da; border-color: #f5c6cb; }
        table { border-collapse: collapse; width: 100%; margin-top: 10px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        a { color: #007bff; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <h1>ProductDomain Quality Report</h1>
    <p>Generated on: ${timestamp}</p>
    
    <div class="section">
        <h2>Summary</h2>
        <p>This report aggregates results from all quality checks across the ProductDomain project.</p>
    </div>
    
    <div class="section">
        <h2>Code Quality Checks</h2>
        <table>
            <tr>
                <th>Module</th>
                <th>Checkstyle</th>
                <th>PMD</th>
                <th>SpotBugs</th>
                <th>Tests</th>
                <th>Coverage</th>
            </tr>
            ${subprojects.findAll { it.name != 'ui-components' }.collect { project ->
                """
            <tr>
                <td>${project.name}</td>
                <td><a href="../../../${project.name}/build/reports/checkstyle/main.html">View Report</a></td>
                <td><a href="../../../${project.name}/build/reports/pmd/main.html">View Report</a></td>
                <td><a href="../../../${project.name}/build/reports/spotbugs/main.html">View Report</a></td>
                <td><a href="../../../${project.name}/build/reports/tests/test/index.html">View Report</a></td>
                <td><a href="../../../${project.name}/build/reports/jacoco/test/html/index.html">View Report</a></td>
            </tr>
                """
            }.join('')}
        </table>
    </div>
    
    <div class="section">
        <h2>Dependency Security</h2>
        <p><a href="../dependency-check-report.html">View OWASP Dependency Check Report</a></p>
    </div>
    
    <div class="section">
        <h2>Aggregated Coverage</h2>
        <p><a href="../jacoco/index.html">View Aggregated JaCoCo Report</a></p>
    </div>
</body>
</html>
    """
}

// Wrapper configuration
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}

// Build performance configuration
gradle.startParameter.excludedTaskNames.addAll(
    subprojects.collect { ":${it.name}:javadoc" }
)

// Automatically install hooks after project evaluation
gradle.projectsEvaluated {
    if (file('.git').exists() && !file('.git/hooks/pre-commit').exists()) {
        println "Installing Git hooks..."
        exec {
            commandLine 'sh', './gradle/git-hooks/install-hooks.sh'
        }
    }
}